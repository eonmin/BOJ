
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int r,c,cnt;
	static String[][] map;
	static int[][] chkmap;
	static int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
	static class Dot{
		int x,y;
		public Dot(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		r = sc.nextInt();
		c = sc.nextInt();
		map = new String[r][c];
		chkmap = new int[r][c];
		
		for(int i=0;i<r;i++) {
			String[] tmp = sc.next().split("");
			for(int j=0;j<c;j++) {
				map[i][j] = tmp[j];
				chkmap[i][j]=0;
			}
		}
		
		
		for(int i=0;i<r;i++) {
			for(int j=0;j<c;j++) {
				if(map[i][j].equals("X")) {
					chkmap[i][j] = 1;
				}else if(map[i][j].equals("S")) {
					dfs(map,i,j,0);
				}
			}
		}
		
		boolean flag = true;
		for(int i=0;i<r;i++) {
			for(int j=0;j<c;j++) {
				if(map[i][j].equals(".") && chkmap[i][j] == 0 ) flag = false;
			}
		}	
		
		if(flag) {
			System.out.println(cnt);
		}else {
			System.out.println("KAKTUS");
		}
	}
	
	static void dfs(String[][] inmap, int x, int y, int t) {
		System.out.println("-----------------------t : "+t+" x : "+x+" y : "+y);
		chkmap[x][y] = 1;
		String[][] tmpmap = getmap(inmap);
		for(int i=0;i<r;i++) {
			for(int j=0;j<c;j++) {
				System.out.print(tmpmap[i][j]);
			}
			System.out.println();
		}
		
		for(int i=0;i<4;i++) {
			int dx = x + dir[i][0];
			int dy = y + dir[i][1];
			if(inside(dx,dy) && tmpmap[dx][dy].equals("D")) {
				cnt = t;
				map = tmpmap;
			}else if(inside(dx,dy) && tmpmap[dx][dy].equals(".") && chkmap[dx][dy] == 0) {
				System.out.println("1. "+dx+" "+dy+" "+ tmpmap[dx][dy]+" "+t);
				chkmap[dx][dy] = 1;
				dfs(inmap,dx,dy,(t+1));
			}
		}
	}
	
	static String[][] getmap(String[][] tmpmap){
		Queue<Dot> q = new LinkedList<Dot>();
		
		for(int i=0;i<r;i++) {
			for(int j=0;j<c;j++) {
				if(tmpmap[i][j].equals("*")) {
					q.add(new Dot(i,j));
				}
			}
		}
		
		while(!q.isEmpty()) {
			Dot d = q.poll();
			for(int k=0;k<4;k++) {
				int dx = d.x + dir[k][0];
				int dy = d.y + dir[k][1];
				if(inside(dx,dy) && tmpmap[dx][dy].equals(".")) {
					tmpmap[dx][dy] = "*";
				}
			}
		}
		
		return tmpmap;
	}
	
	static boolean inside(int x, int y) {
		return !(x<0 || y<0 || x>=r || y>=c);
	}

}
