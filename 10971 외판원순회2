package dfs_example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class BOJ_10971 {
	static int n,pay,cnt, start;
	static int[][] map;
	static int[] chkmap;
	static ArrayList<Integer> cntlist = new ArrayList<>();
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		n = sc.nextInt();
		map = new int[n][n];
		chkmap = new int[n];
		
		for(int i=0;i<n;i++) {
			chkmap[i] = 0;
			for(int j=0;j<n;j++) {
				map[i][j] = sc.nextInt();
			}
		}
		for(int i=0;i<n;i++) {
			pay = 0;
			//시작지점 표시
			start = i;
			//chkmap 리셋
			Arrays.fill(chkmap, 0);
			chkmap[i] = 1;
			//cnt = 1, pay = 0
			dfs(i,1,0,chkmap);
		}

		Collections.sort(cntlist);
		System.out.println(cntlist.get(0));
	
	}
	//x : input, c : count, p : pay, m : chkmap
	static void dfs(int x, int c, int p, int[] tmap) {
		
		for(int i=0;i<n;i++) {
			if(x != i && tmap[i] == 0 && map[x][i] !=0) { //조건 빼먹음!! 0인 경우 방문하지 않음
				tmap[i] = 1;
				dfs(i,c+1,p+map[x][i],tmap);
				//원복
				tmap[i] = 0;
			}
		}
		
		//순회하므로 마지막에 처음으로 돌아가는 비용 더해주기
		if(c == n && map[x][start] != 0) {
			pay = p+map[x][start];
			cntlist.add(pay);
		}
	}
	
}
