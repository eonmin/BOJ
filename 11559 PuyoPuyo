package dfs_example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class BOJ_11559 {
	static int n = 12;
	static int m = 6;
	static int cnt = -1; //시작할때 cnt 더하므로 -1로 시작
	static String[][] map = new String[n][m];
	static boolean[][] chkmap = new boolean[n][m];
	static int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
	static ArrayList<Dot> list;
	static class Dot{
		int x,y;
		public Dot(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		for(int i=0;i<n;i++) {
			String[] tmp = sc.next().split("");
//			map[i] = sc.nextLine().toCharArray(); //split안하고 한번에 넣는 방법도 있음. 단점은 char로 넣어야 한다.
			for(int j=0;j<m;j++) {
				map[i][j] = tmp[j];
				chkmap[i][j] = true;
			}
		}
		

		while(true) {
			
			boolean flag = false;
			cnt++;
			map = getmap(map);

			//chkmap true
			for(int i=0;i<n;i++) {
				for(int j=0;j<m;j++) {
					chkmap[i][j] = true; //Arrays.fill(chkmap[i],true); 
				}
			}	
			
			for(int i=0;i<n;i++) {
				for(int j=0;j<m;j++) {
					if(!map[i][j].equals(".") && chkmap[i][j]) {
						list = new ArrayList<Dot>();
						list.add(new Dot(i,j));
						dfs(i,j,map[i][j]);
						
						if(list.size()>=4) {
							flag = true;
							
							for(int k=0;k<list.size();k++) {
								Dot d = list.get(k);
								map[d.x][d.y] = ".";
							}
						}
					}
				}
			}
			if(!flag) break;
		}
		
		System.out.println(cnt);
		
	}
	
	static void dfs(int x, int y, String c) {
		
		chkmap[x][y] = false;
		
		for(int i=0;i<4;i++) {
			int dx = x + dir[i][0];
			int dy = y + dir[i][1];
			
			if(inside(dx,dy) && chkmap[dx][dy] && map[dx][dy].equals(c)) {
				list.add(new Dot(dx,dy));
				dfs(dx,dy,c);
			}
			
		}
	}
	
	
	//열 정보 묶어서 "." 지우고 다시 채우기 
	static String[][] getmap(String[][] inmap){
		String[] tmp = new String[m];
		for(int j=0;j<m;j++) {
			tmp[j] = "";
			for(int i=0;i<n;i++) {
				if(!map[i][j].equals(".")) tmp[j]+=map[i][j];
			}
		}	
		
		for(int j=0;j<m;j++) {
			String[] tmp2 = tmp[j].split(""); //tmp[j] = "" .split -> tmp2.length = 1 로 계산됨.
			for(int i=0;i<n;i++) {
				if(i<(n-tmp[j].length())) {
					map[i][j] = ".";
				}else {
					map[i][j] = tmp2[i-(n-tmp[j].length())];
				}
			}
		}
		
		
		return inmap;
	}
	
	static boolean inside(int x, int y) {
		return !(x<0 || y<0 || x>=n || y>=m);
	}

}
