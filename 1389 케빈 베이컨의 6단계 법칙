import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n,m;
	static int[][] map;
	static int[] chkmap;
	static int[] cntmap;
	static int[] kbnum;
	static Queue<Point> q = new LinkedList<Point>();
	static class Point{
		int x, cnt;
		public Point(int x, int cnt) {
			this.x = x;
			this.cnt = cnt;
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		n = sc.nextInt()+1;
		m = sc.nextInt();
		
		map = new int[n][n];
		cntmap = new int[n];
		kbnum = new int[n];
		
		//데이터 insert
		for(int i=0;i<m;i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			map[a][b] = map[b][a] = 1;
		}
		
		//모든 점에 대해 dfs 돌리기
		for(int i=1;i<n;i++) {
			chkmap = new int[n];
			Arrays.fill(chkmap, 0);
			int[] tmp = dfs(i,1);
			
			//케빈 베이컨 수 계산
			for(int j=1;j<n;j++) {
				kbnum[i] = kbnum[i] + tmp[j];
			}
		}
		
		//최소 kb 출력
		System.out.println(min(kbnum));
		
	}
	
	static int[] dfs(int x, int cnt_in) {
		chkmap[x] = 1;
		cntmap[x] = 0;
		q.offer(new Point(x, cnt_in));
		
		while(!q.isEmpty()) {
			Point p = q.poll();
			int cnt = p.cnt;
			for(int i=1;i<n;i++) {
				if(map[p.x][i] == 1 && chkmap[i] == 0) {
					q.offer(new Point(i,cnt+1));
					chkmap[i] = 1;
					cntmap[i] = cnt;
				}
			}
		}
		return cntmap;
	}
	
	static int min(int[] kbnum) {
		int min = Integer.MAX_VALUE;
		int num = -1;
		//kbnum[0]은 제외, 최소값이 여러 명일 경우 번호가 작은 사람 출력
		for(int i=1;i<n;i++) {
			if(kbnum[i] < min) {
				min = kbnum[i];
				num = i;
			}
		}
		return num;
	}
	
	static boolean inside(int x, int y) {
		return !(x<0||y<0||x>=n||y>=n);
	}

}
