
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n,m,cnt;
	static int[][] map;
	static int[][] chkmap;
	static int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
	static class Dot{
		int x,y,c;
		public Dot(int x, int y, int c) {
			this.x = x;
			this.y = y;
			this.c = c;
		}
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		n = sc.nextInt();
		m = sc.nextInt();
		map = new int[n][m];
		chkmap = new int[n][m];
		
		for(int i=0;i<n;i++) {
			String[] tmp = sc.next().split("");
			for(int j=0;j<m;j++) {
				map[i][j] = Integer.parseInt(tmp[j]);
				chkmap[i][j] = 0;
			}
		}
		
		bfs(0,0,1);
		
		System.out.println(cnt);
	}
	
	static void bfs(int x, int y, int c) {
		Queue<Dot> q = new LinkedList<Dot>();
		q.add(new Dot(x,y,c));
		chkmap[x][y] = 1;
		while(!q.isEmpty()) {
			Dot d = q.poll();
			for(int i=0;i<4;i++) {
				int dx = d.x + dir[i][0];
				int dy = d.y + dir[i][1];
				int dc = d.c+1;
				
				if((dx == n-1) && (dy == m-1)) {
					cnt = dc;
					return;
				}
				else if(inside(dx,dy) && chkmap[dx][dy] == 0 && map[dx][dy] == 1) {
					chkmap[dx][dy] = 1;
					q.add(new Dot(dx,dy,dc));
				}
			}
		}
	}
	
	static boolean inside(int x, int y) {
		return !(x<0 || y<0 || x>=n || y>=m);
	}

}
