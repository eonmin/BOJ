package dfs_example;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class BOJ_2468 {
	static int n;
	static int maxh, maxcnt = 1; //maxh일때 curcnt가 1되어야하는데 0이 되므로 maxcnt 초기값을 1로 설정
	static int[][] map;
	static boolean[][] chkmap;
	static int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
	static class Dot{
		int x,y;
		public Dot(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		n = sc.nextInt();
		map = new int[n][n];
		chkmap = new boolean[n][n];
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				map[i][j] = sc.nextInt();
				if(map[i][j] > maxh) maxh = map[i][j];
			}
		}
		System.out.println(maxh);
		for(int k=1;k<=maxh;k++) {
			for(int i=0;i<n;i++) {
				for(int j=0;j<n;j++) {
					chkmap[i][j] = true;
				}
			}	
			int curcnt=0;
			for(int i=0;i<n;i++) {
				for(int j=0;j<n;j++) {
					if(chkmap[i][j] && map[i][j]>k) {
						bfs(i,j,k);
						curcnt++;
					}
				}
			}	
			System.out.println(curcnt);
			if(curcnt>maxcnt) maxcnt = curcnt;
		}
		
		System.out.println(maxcnt);
		
	}
	
	static void bfs(int x, int y, int h) {
		Queue<Dot> q = new LinkedList<Dot>();
		q.offer(new Dot(x,y));
		while(!q.isEmpty()) {
			Dot d = q.poll();
			
			for(int i=0;i<4;i++) {
				int dx = d.x+dir[i][0];
				int dy = d.y+dir[i][1];
				
				if(inside(dx,dy) && chkmap[dx][dy] && map[dx][dy] > h) {
					q.offer(new Dot(dx,dy));
					chkmap[dx][dy] = false;
				}
			}
		}
	}
	
	static boolean inside(int x, int y) {
		return !(x<0 || y<0 || x>=n || y>=n);
	}

}
