
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Main {
	
	static int n;
	static int[][] map;
	static int[][] visited;
	static int[][] dir = {  {1,0},
							{0,1},
							{-1,0},
							{0,-1} };
	static List<Integer> cntList = new ArrayList<Integer>();
	static int cnt;
	
	public static void main(String[] args) throws IOException{
	Scanner	sc = new Scanner(System.in);
	
	n = sc.nextInt();
	map = new int[n][n];
	visited = new int[n][n];

	//데이터 insert
	for(int i=0;i<n;i++) {
		String[] tmp = sc.next().split("");
		for(int j=0;j<n;j++){
			map[i][j] = Integer.parseInt(tmp[j]);
			visited[i][j] = 0;
		}
	}
	
	//map = 1 이고 방문하지 않은 곳 dfs로 접근
	for(int i=0;i<n;i++) {
		for(int j=0;j<n;j++){
			if(map[i][j] == 1 && visited[i][j] == 0) {
				cnt=1;
				visited[i][j] = 1;
				dfs(i,j);
				cntList.add(cnt);
			}
		}
	}
	
	System.out.println(cntList.size());
	Collections.sort(cntList);
	for(int i=0;i<cntList.size();i++) {
		System.out.println(cntList.get(i));
	}
	
	}
	
	static boolean checkInside(int x, int y) {
		boolean flag = true;
		if(x<0 || y <0 || x>=n || y>=n ) flag = false;
		
		return flag;
	}
	
	static void dfs(int x, int y) {
		for(int i=0;i<4;i++) {
			int dx = x + dir[i][0];
			int dy = y + dir[i][1];
			if(checkInside(dx, dy)) {
				if(map[dx][dy] == 1 && visited[dx][dy] == 0) {
					cnt++;
					visited[dx][dy] = 1;
					dfs(dx,dy);
					
				}
			}
		}
	}

}
