import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	
	static int m;
	static int n;
	static int[][] map;
	static int day;
	static int[][] chkmap;
	static int[][] dir = {  {1,0},
							{0,1},
							{-1,0},
							{0,-1} };
	static class Dot{
		int x, y, day;
		
		public Dot(int x, int y, int day) {
			this.x = x;
			this.y = y;
			this.day = day;
		}
		
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		m = sc.nextInt();
		n = sc.nextInt();
		map = new int[n][m];
		chkmap = new int[n][m];
		
		//주어진 데이터 넣기
		for(int i=0;i<n;i++) {
			for(int j=0;j<m;j++) {
				map[i][j] = sc.nextInt();
				chkmap[i][j] = 0;
			}
		}
		
		Queue<Dot> q = new LinkedList<Dot>();
		//q에 방문해야 할 좌표값 넣기
		for(int i=0;i<n;i++) {
			for(int j=0;j<m;j++) {
				if(map[i][j] == 1) {
					q.offer(new Dot(i,j,0));
				}else if(map[i][j] == -1) {
					chkmap[i][j] = 1;
				}
			}
		}
		
		//bfs 돌리기
		while(!q.isEmpty()) {
			Dot dot = q.poll();
			day = dot.day;
			chkmap[dot.x][dot.y] = 1;
			for(int i=0;i<4;i++) {
				int dx = dot.x + dir[i][0];
				int dy = dot.y + dir[i][1];
				if(inside(dx,dy)) {
					if(map[dx][dy] == 0 && chkmap[dx][dy] == 0) {
						chkmap[dx][dy] = 1;
						q.offer(new Dot(dx,dy,day+1));
					}
				}
			}
		}
		
		
		//dfs 끝나고 값 확인
		int tmp=0;
		for(int i=0;i<n;i++) {
			for(int j=0;j<m;j++) {
				if(chkmap[i][j] == 0) {
					tmp = -1;
				}
			}
		}
		
		//출력
		if(tmp == -1) {
			System.out.println(-1);
		}else if(tmp == 0) {
			System.out.println(day);
		}
	}
	
	static boolean inside(int x, int y) {
		boolean flag = true;
		if(x<0 || y<0 || x>=n || y>=m) flag = false;
		
		return flag;
	}

}
